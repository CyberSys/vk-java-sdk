// Autogenerated from vk-api-schema. Please don't edit it manually.
package com.vk.api.sdk.queries.wall;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.vk.api.sdk.client.AbstractQueryBuilder;
import com.vk.api.sdk.client.VkApiClient;
import com.vk.api.sdk.client.actors.UserActor;
import com.vk.api.sdk.objects.annotations.ApiParam;
import com.vk.api.sdk.objects.base.NameCase;
import com.vk.api.sdk.objects.wall.responses.ParseAttachedLinkResponse;

import java.util.Arrays;
import java.util.List;

/**
 * Query for Wall.parseAttachedLink method
 */
public class WallParseAttachedLinkQuery extends AbstractQueryBuilder<WallParseAttachedLinkQuery, ParseAttachedLinkResponse> {
    /**
     * Creates a AbstractQueryBuilder instance that can be used to build user api request with various parameters
     *
     * @param client VK API client
     * @param actor actor with access token
     * @param links value of "links" parameter.
     */
    public WallParseAttachedLinkQuery(VkApiClient client, UserActor actor, JsonObject... links) {
        super(client, "wall.parseAttachedLink", ParseAttachedLinkResponse.class);
        accessToken(actor.getAccessToken());
        links(links);
    }

    /**
     * Creates a AbstractQueryBuilder instance that can be used to build user api request with various parameters
     *
     * @param client VK API client
     * @param actor actor with access token
     * @param links value of "links" parameter.
     */
    public WallParseAttachedLinkQuery(VkApiClient client, UserActor actor, List<JsonObject> links) {
        super(client, "wall.parseAttachedLink", ParseAttachedLinkResponse.class);
        accessToken(actor.getAccessToken());
        links(links);
    }

    /**
     * Creates a AbstractQueryBuilder instance that can be used to build user api request with various parameters
     *
     * @param client VK API client
     * @param actor actor with access token
     */
    public WallParseAttachedLinkQuery(VkApiClient client, UserActor actor) {
        super(client, "wall.parseAttachedLink", ParseAttachedLinkResponse.class);
        accessToken(actor.getAccessToken());
    }

    /**
     * Set extended
     *
     * @param value value of "extended" parameter. By default false.
     * @return a reference to this {@code AbstractQueryBuilder} object to fulfill the "Builder" pattern.
     */
    @ApiParam("extended")
    public WallParseAttachedLinkQuery extended(Boolean value) {
        return unsafeParam("extended", value);
    }

    /**
     * Set name case
     *
     * @param value value of "name case" parameter.
     * @return a reference to this {@code AbstractQueryBuilder} object to fulfill the "Builder" pattern.
     */
    @ApiParam("name_case")
    public WallParseAttachedLinkQuery nameCase(NameCase value) {
        return unsafeParam("name_case", value);
    }

    /**
     * links
     * Set links
     *
     * @param value value of "links" parameter.
     * @return a reference to this {@code AbstractQueryBuilder} object to fulfill the "Builder" pattern.
     */
    @ApiParam("links")
    public WallParseAttachedLinkQuery links(JsonObject... value) {
        return unsafeParam("links", new Gson().toJson(value));
    }

    /**
     * Set links
     *
     * @param value value of "links" parameter.
     * @return a reference to this {@code AbstractQueryBuilder} object to fulfill the "Builder" pattern.
     */
    @ApiParam("links")
    public WallParseAttachedLinkQuery links(List<JsonObject> value) {
        return unsafeParam("links", new Gson().toJson(value));
    }

    /**
     * fields
     * Set fields
     *
     * @param value value of "fields" parameter.
     * @return a reference to this {@code AbstractQueryBuilder} object to fulfill the "Builder" pattern.
     */
    @ApiParam("fields")
    public WallParseAttachedLinkQuery fields(String... value) {
        return unsafeParam("fields", value);
    }

    /**
     * Set fields
     *
     * @param value value of "fields" parameter.
     * @return a reference to this {@code AbstractQueryBuilder} object to fulfill the "Builder" pattern.
     */
    @ApiParam("fields")
    public WallParseAttachedLinkQuery fields(List<String> value) {
        return unsafeParam("fields", value);
    }

    @Override
    protected WallParseAttachedLinkQuery getThis() {
        return this;
    }

    @Override
    protected List<String> essentialKeys() {
        return Arrays.asList("links", "access_token");
    }
}
