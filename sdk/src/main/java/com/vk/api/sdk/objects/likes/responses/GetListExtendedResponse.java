// Autogenerated from vk-api-schema. Please don't edit it manually.
package com.vk.api.sdk.objects.likes.responses;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.vk.api.sdk.objects.Validable;
import com.vk.api.sdk.objects.annotations.Required;
import com.vk.api.sdk.objects.users.SubscriptionsItem;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * GetListExtendedResponse object
 */
public class GetListExtendedResponse implements Validable {
    /**
     * Total number
     */
    @SerializedName("count")
    @Required
    private Integer count;

    @SerializedName("items")
    @Required
    private List<JsonObject> items;

    /**
     * Author of post if he liked the comment
     */
    @SerializedName("liked_by_author")
    private SubscriptionsItem likedByAuthor;

    /**
     * Group where post is present if they liked the comment
     */
    @SerializedName("liked_by_group")
    private SubscriptionsItem likedByGroup;

    public Integer getCount() {
        return count;
    }

    public GetListExtendedResponse setCount(Integer count) {
        this.count = count;
        return this;
    }

    public List<SubscriptionsItem> getItems() {
        return items.stream().map(item -> new com.vk.api.sdk.client.GsonHolder().getGson().fromJson(item, SubscriptionsItem.class)).collect(Collectors.toList());
    }

    public SubscriptionsItem getLikedByAuthor() {
        return likedByAuthor;
    }

    public GetListExtendedResponse setLikedByAuthor(SubscriptionsItem likedByAuthor) {
        this.likedByAuthor = likedByAuthor;
        return this;
    }

    public SubscriptionsItem getLikedByGroup() {
        return likedByGroup;
    }

    public GetListExtendedResponse setLikedByGroup(SubscriptionsItem likedByGroup) {
        this.likedByGroup = likedByGroup;
        return this;
    }

    @Override
    public int hashCode() {
        return Objects.hash(likedByGroup, count, items, likedByAuthor);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        GetListExtendedResponse getListExtendedResponse = (GetListExtendedResponse) o;
        return Objects.equals(likedByAuthor, getListExtendedResponse.likedByAuthor) &&
                Objects.equals(count, getListExtendedResponse.count) &&
                Objects.equals(likedByGroup, getListExtendedResponse.likedByGroup) &&
                Objects.equals(items, getListExtendedResponse.items);
    }

    @Override
    public String toString() {
        final Gson gson = new Gson();
        return gson.toJson(this);
    }

    public String toPrettyString() {
        final StringBuilder sb = new StringBuilder("GetListExtendedResponse{");
        sb.append("likedByAuthor=").append(likedByAuthor);
        sb.append(", count=").append(count);
        sb.append(", likedByGroup=").append(likedByGroup);
        sb.append(", items=").append(items);
        sb.append('}');
        return sb.toString();
    }
}
